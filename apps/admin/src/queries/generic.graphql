mutation UpdateDownloadSourceById(
  $id: Int!
  $downloadSourcePatch: DownloadSourcePatch!
) {
  updateDownloadSourceById(
    input: { id: $id, downloadSourcePatch: $downloadSourcePatch }
  ) {
    __typename
  }
}

mutation CreateDownloadSource($downloadSource: DownloadSourceInput!) {
  createDownloadSource(input: { downloadSource: $downloadSource }) {
    __typename
  }
}

query GetSeasonById($id: Int!) {
  seasonById(id: $id) {
    id
    infoSource
    isMonitoring
    jellyfinId
    mikanAnimeId
    seasonRoot
    tags
    title
    tvdbId
    tvdbSeason
    weekday
    yearAndSemester
    airTime
    bangumiId
    bilibiliMainlandId
    bilibiliThmId
    createdAt
    description
    isArchived
    episodesBySeasonId {
      edges {
        node {
          airTime
          id
          jellyfinEpisodeId
          title
          downloadJobsByEpisodeId(first: 1, orderBy: CREATED_AT_DESC) {
            totalCount
            edges {
              node {
                status
                isFailed
              }
            }
          }
        }
      }
    }
    episodesSource
  }
}

query ListDownloadSources($condition: DownloadSourceCondition) {
  allDownloadSources(condition: $condition) {
    edges {
      node {
        isDisabled
        groupId
        pattern
        id
      }
    }
  }
}

mutation UpdateSeasonById($id: Int!, $seasonPatch: SeasonPatch!) {
  updateSeasonById(input: { id: $id, seasonPatch: $seasonPatch }) {
    __typename
  }
}

mutation DeleteDownloadConfigById($id: Int!) {
  updateDownloadSourceById(
    input: { id: $id, downloadSourcePatch: { isArchived: true } }
  ) {
    __typename
  }
}

mutation DeleteSeasonById($id: Int!) {
  updateSeasonById(input: { id: $id, seasonPatch: { isArchived: true } }) {
    __typename
  }
}

query GetDownloadSourceById($downloadSourceByIdId: Int!) {
  downloadSourceById(id: $downloadSourceByIdId) {
    isArchived
    id
    groupId
    isDisabled
    pattern
  }
}

mutation CreateDownloadSource($downloadSource: DownloadSourceInput!) {
  createDownloadSource(input: { downloadSource: $downloadSource }) {
    __typename
  }
}
