/* 7c1115f035dc846dc4212ca28787f5dec0916876
 * This file is automatically generated by graphql-let. */

import * as Types from "graphql-let/__generated__/__types__";
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';
export declare type TorrentFieldsFragment = {
  __typename?: 'Torrent';
  id: number;
  publishDate: any;
  size: any;
  title: string;
  torrentLink: string;
  episodeIndex?: number | null;
};
export declare type TorrentParseFieldsFragment = {
  __typename?: 'Torrent';
  index?: number | null;
  indexFrom?: number | null;
  indexTo?: number | null;
  organizationParts?: Array<string | null> | null;
  seasonTitleAliases?: Array<string | null> | null;
  subtitleHasChs: boolean;
  subtitleHasCht: boolean;
  subtitleHasJp: boolean;
  subtitleType?: string | null;
};
export declare type ListTorrentsQueryVariables = Types.Exact<{
  offset?: Types.InputMaybe<Types.Scalars['Int']>;
  first?: Types.InputMaybe<Types.Scalars['Int']>;
  orderBy?: Types.InputMaybe<Array<Types.TorrentsOrderBy> | Types.TorrentsOrderBy>;
  filter?: Types.InputMaybe<Types.TorrentFilter>;
}>;
export declare type ListTorrentsQuery = {
  __typename?: 'Query';
  allTorrents?: {
    __typename?: 'TorrentsConnection';
    totalCount: number;
    edges: Array<{
      __typename?: 'TorrentsEdge';
      cursor?: any | null;
      node?: {
        __typename?: 'Torrent';
        id: number;
        publishDate: any;
        size: any;
        title: string;
        torrentLink: string;
        episodeIndex?: number | null;
        index?: number | null;
        indexFrom?: number | null;
        indexTo?: number | null;
        organizationParts?: Array<string | null> | null;
        seasonTitleAliases?: Array<string | null> | null;
        subtitleHasChs: boolean;
        subtitleHasCht: boolean;
        subtitleHasJp: boolean;
        subtitleType?: string | null;
      } | null;
    }>;
    pageInfo: {
      __typename?: 'PageInfo';
      hasNextPage: boolean;
    };
  } | null;
};
export declare const TorrentFieldsFragmentDoc: DocumentNode<TorrentFieldsFragment, unknown>;
export declare const TorrentParseFieldsFragmentDoc: DocumentNode<TorrentParseFieldsFragment, unknown>;
export declare const ListTorrentsDocument: DocumentNode<ListTorrentsQuery, Types.Exact<{
  offset?: Types.InputMaybe<number> | undefined;
  first?: Types.InputMaybe<number> | undefined;
  orderBy?: Types.InputMaybe<Types.TorrentsOrderBy | Types.TorrentsOrderBy[]> | undefined;
  filter?: Types.InputMaybe<Types.TorrentFilter> | undefined;
}>>;