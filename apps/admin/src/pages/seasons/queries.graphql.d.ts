/* 6de776995b51eda9dacf32a3f13cde91d12f7480
 * This file is automatically generated by graphql-let. */

import * as Types from "graphql-let/__generated__/__types__";
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';
export declare type ListSeasonsFieldsFragment = {
  __typename?: 'Season';
  bangumiId: string;
  airTime: string;
  weekday?: number | null;
  mikanAnimeId: string;
  isMonitoring: boolean;
  title: string;
  id: number;
  yearAndSemester: string;
  tvdbId: string;
  tvdbSeason?: number | null;
  bilibiliThmId: string;
  bilibiliMainlandId: string;
  jellyfinId: string;
  jellyfinFolderByJellyfinFolderId?: {
    __typename?: 'JellyfinFolder';
    name: string;
  } | null;
  allEpisodes: {
    __typename?: 'EpisodesConnection';
    totalCount: number;
  };
  airedEpisodes: {
    __typename?: 'EpisodesConnection';
    totalCount: number;
  };
  availableEpisodes: {
    __typename?: 'EpisodesConnection';
    totalCount: number;
  };
  latestEpisode: {
    __typename?: 'EpisodesConnection';
    edges: Array<{
      __typename?: 'EpisodesEdge';
      node?: {
        __typename?: 'Episode';
        airTime?: any | null;
        jobs: {
          __typename?: 'DownloadJobsConnection';
          edges: Array<{
            __typename?: 'DownloadJobsEdge';
            node?: {
              __typename?: 'DownloadJob';
              status: Types.DownloadStatus;
              isFailed: boolean;
            } | null;
          }>;
        };
      } | null;
    }>;
  };
};
export declare type EpisodeStatusFieldsFragment = {
  __typename?: 'Episode';
  airTime?: any | null;
  jobs: {
    __typename?: 'DownloadJobsConnection';
    edges: Array<{
      __typename?: 'DownloadJobsEdge';
      node?: {
        __typename?: 'DownloadJob';
        status: Types.DownloadStatus;
        isFailed: boolean;
      } | null;
    }>;
  };
};
export declare type DownloadJobStatusFieldsFragment = {
  __typename?: 'DownloadJob';
  status: Types.DownloadStatus;
  isFailed: boolean;
};
export declare type ListSeasonsQueryVariables = Types.Exact<{
  offset?: Types.InputMaybe<Types.Scalars['Int']>;
  first?: Types.InputMaybe<Types.Scalars['Int']>;
  orderBy?: Types.InputMaybe<Array<Types.SeasonsOrderBy> | Types.SeasonsOrderBy>;
  filter?: Types.InputMaybe<Types.SeasonFilter>;
  now: Types.Scalars['Datetime'];
}>;
export declare type ListSeasonsQuery = {
  __typename?: 'Query';
  allSeasons?: {
    __typename?: 'SeasonsConnection';
    totalCount: number;
    pageInfo: {
      __typename?: 'PageInfo';
      hasNextPage: boolean;
    };
    edges: Array<{
      __typename?: 'SeasonsEdge';
      cursor?: any | null;
      node?: {
        __typename?: 'Season';
        bangumiId: string;
        airTime: string;
        weekday?: number | null;
        mikanAnimeId: string;
        isMonitoring: boolean;
        title: string;
        id: number;
        yearAndSemester: string;
        tvdbId: string;
        tvdbSeason?: number | null;
        bilibiliThmId: string;
        bilibiliMainlandId: string;
        jellyfinId: string;
        jellyfinFolderByJellyfinFolderId?: {
          __typename?: 'JellyfinFolder';
          name: string;
        } | null;
        allEpisodes: {
          __typename?: 'EpisodesConnection';
          totalCount: number;
        };
        airedEpisodes: {
          __typename?: 'EpisodesConnection';
          totalCount: number;
        };
        availableEpisodes: {
          __typename?: 'EpisodesConnection';
          totalCount: number;
        };
        latestEpisode: {
          __typename?: 'EpisodesConnection';
          edges: Array<{
            __typename?: 'EpisodesEdge';
            node?: {
              __typename?: 'Episode';
              airTime?: any | null;
              jobs: {
                __typename?: 'DownloadJobsConnection';
                edges: Array<{
                  __typename?: 'DownloadJobsEdge';
                  node?: {
                    __typename?: 'DownloadJob';
                    status: Types.DownloadStatus;
                    isFailed: boolean;
                  } | null;
                }>;
              };
            } | null;
          }>;
        };
      } | null;
    }>;
  } | null;
};
export declare type CreateSeasonMutationVariables = Types.Exact<{
  season: Types.SeasonInput;
}>;
export declare type CreateSeasonMutation = {
  __typename?: 'Mutation';
  createSeason?: {
    __typename?: 'CreateSeasonPayload';
    season?: {
      __typename?: 'Season';
      id: number;
    } | null;
  } | null;
};
export declare type SearchBangumiQueryVariables = Types.Exact<{
  keywords: Types.Scalars['String'];
}>;
export declare type SearchBangumiQuery = {
  __typename?: 'Query';
  searchBangumi: Array<{
    __typename?: 'SearchBangumiSeason';
    added: boolean;
    airDate?: string | null;
    id: string;
    image?: string | null;
    name: string;
  }>;
};
export declare type JellyfinFolderFieldsFragment = {
  __typename?: 'JellyfinFolder';
  id: number;
  name: string;
  location: string;
};
export declare type GetMetadataPageOptionsQueryVariables = Types.Exact<{
  [key: string]: never;
}>;
export declare type GetMetadataPageOptionsQuery = {
  __typename?: 'Query';
  getAvailableSemesters: Array<string>;
  allJellyfinFolders?: {
    __typename?: 'JellyfinFoldersConnection';
    edges: Array<{
      __typename?: 'JellyfinFoldersEdge';
      node?: {
        __typename?: 'JellyfinFolder';
        id: number;
        name: string;
        location: string;
      } | null;
    }>;
  } | null;
};
export declare type DeleteSeasonByIdMutationVariables = Types.Exact<{
  id: Types.Scalars['Int'];
}>;
export declare type DeleteSeasonByIdMutation = {
  __typename?: 'Mutation';
  deleteSeasonById: string;
};
export declare type ListJellyfinFoldersQueryVariables = Types.Exact<{
  [key: string]: never;
}>;
export declare type ListJellyfinFoldersQuery = {
  __typename?: 'Query';
  allJellyfinFolders?: {
    __typename?: 'JellyfinFoldersConnection';
    edges: Array<{
      __typename?: 'JellyfinFoldersEdge';
      node?: {
        __typename?: 'JellyfinFolder';
        id: number;
        name: string;
        location: string;
      } | null;
    }>;
  } | null;
};
export declare const DownloadJobStatusFieldsFragmentDoc: DocumentNode<DownloadJobStatusFieldsFragment, unknown>;
export declare const EpisodeStatusFieldsFragmentDoc: DocumentNode<EpisodeStatusFieldsFragment, unknown>;
export declare const ListSeasonsFieldsFragmentDoc: DocumentNode<ListSeasonsFieldsFragment, unknown>;
export declare const JellyfinFolderFieldsFragmentDoc: DocumentNode<JellyfinFolderFieldsFragment, unknown>;
export declare const ListSeasonsDocument: DocumentNode<ListSeasonsQuery, Types.Exact<{
  offset?: Types.InputMaybe<number> | undefined;
  first?: Types.InputMaybe<number> | undefined;
  orderBy?: Types.InputMaybe<Types.SeasonsOrderBy | Types.SeasonsOrderBy[]> | undefined;
  filter?: Types.InputMaybe<Types.SeasonFilter> | undefined;
  now: Types.Scalars['Datetime'];
}>>;
export declare const CreateSeasonDocument: DocumentNode<CreateSeasonMutation, Types.Exact<{
  season: Types.SeasonInput;
}>>;
export declare const SearchBangumiDocument: DocumentNode<SearchBangumiQuery, Types.Exact<{
  keywords: Types.Scalars['String'];
}>>;
export declare const GetMetadataPageOptionsDocument: DocumentNode<GetMetadataPageOptionsQuery, Types.Exact<{
  [key: string]: never;
}>>;
export declare const DeleteSeasonByIdDocument: DocumentNode<DeleteSeasonByIdMutation, Types.Exact<{
  id: Types.Scalars['Int'];
}>>;
export declare const ListJellyfinFoldersDocument: DocumentNode<ListJellyfinFoldersQuery, Types.Exact<{
  [key: string]: never;
}>>;